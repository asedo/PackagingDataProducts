shiny::runApp()
install.packages("miniUI")
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M = gvisMotionChart(Fruits, "fruit", "Year", options=list(width=600, height=400))
M = gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "Chart")
plot(M)
plot(M)
Exports
G = gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400, region="150"))
plot(G)
G2 = gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400, region="150"))
plot(G2)
plot(G)
G = gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600,height=400))
plot(G)
install.packages("Plotly")
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x=wt, y= mpg, mode="markers")
plot_ly(mtcars, x=wt, y= mpg, mode="markers")
data("mtcars")
plot_ly(mtcars, x=wt, y= mpg, mode="markers")
names(mtcars)
plot_ly(mtcars, x="wt"", y= "mpg"", mode="markers")
plot_ly(mtcars, x="wt", y= "mpg", mode="markers")
head(mtcars)
table(mtcars$cyl)
plot_ly(mtcars,x=wt,y=mpg,mode="markers",color = as.factor(cyl))
plot_ly(data=mtcars,x=wt,y=mpg,mode="markers",color = as.factor(cyl))
plot_ly(mtcars,x = wt,y = mpg,mode = "markers",color = as.factor(cyl))
plot_ly(mtcars,x = 'wt',y = 'mpg',mode = "markers",color = as.factor(cyl))
plot_ly(mtcars,x = 'wt',y = 'mpg',mode = "markers",color = as.factor('cyl'))
plot_ly(mtcars,x = 'wt',y = 'mpg',mode = "markers",color = as.factor('cyl'))
plot_ly(mtcars,x = wt,y = mpg,mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = am,y = mpg,mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = "am",y = "mpg", mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = "am",y = "mpg", mode = "markers", color = as.factor("cyl""))
)
)
plot_ly(mtcars,x = "am",y = "mpg", mode = "markers", color = as.factor("cyl")
)
install.packages()
install.packages("DevTools")
install.packages("devTools")
library(devtools)
install.packages("devtools")
plot_ly(mtcars,x = am,y = mpg, mode = "markers", color = as.factor(cyl)
plot_ly(mtcars,x = am,y = mpg, mode = "markers", color = as.factor(cyl))
require(devtools)
install_github("ropensci/plotly")
plotly:::verify("asedo")
library(plotly)
plot_ly(midwest, x=~percollege, color = ~state, type = "box")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
plot_ly(z = ~volcano, type = "surface")
plot_ly(mtcars, x=wt, y= mpg, mode="markers")
?plot_ly
class(mtcars)
plot_ly(data = mtcars,x = "am",y = "mpg", mode = "markers", color = as.factor("cyl"))
head(mtcars)
plot_ly(data = mtcars,x = wt,y = mpg, mode = "markers", color = as.factor(cyl))
plot_ly(z=volcano)
plot_ly(z=~volcano)
plot_ly(z=volcano)
plot_ly(z=~volcano)
plot_ly(data = mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(cyl))
plot_ly(data = mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(~cyl))
getwd()
Sys.setenv("plotly_username"="asedo")
Sys.setenv(("plotly_api_key"="trgro2tsvz"))
Sys.setenv("plotly_api_key"="ol54dud1hw")
plot_ly(data = mtcars,x = wt,y = mpg, mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = wt,y = mpg, mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(~cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor("cyl"))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor(~cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor("~cyl"))
table(cyl)
table("cyl")
mtcars$cyl
table(mtcars$cyl)
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = as.factor("cyl"))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = ~cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = cyl))
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = cyl)
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = ~cyl)
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = ~disp)
plot_ly(mtcars,x = ~wt,y = ~mpg, mode = "markers", color = ~disp, size = ~hp)
plot_ly(x=~time(airmiles), y=airmiles)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
head(EuStockMarkets)
as.data.frame(EuStockMarkets)
as.data.frame(EuStockMarkets) %>% gather(index,price)
as.data.frame(EuStockMarkets)
head(as.data.frame(EuStockMarkets))
headIas.data.frame(EuStockMarkets) %>% gather(index,price))
head(as.data.frame(EuStockMarkets) %>% gather(index,price))
?mutate
stocks = as.data.frame(EuStockMarkets) %>%
gather(index,price) %>%
mutate(time = rep(time(EuStockMarkets),4))
plot_ly(stocks, x=~time, y=~price, color= ~index)
terrain1 = matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z=terrain1, type = "heatmap")
head(terrain1)
dim(terrain1)
plot_ly(z=terrain1, type = "surface")
state_pop = data.frame(Stae = state.abb, Pop = as.vector(state.x77[,1]))
state_pop = data.frame(Stae = state.abb, Pop = as.vector(state.x77[,1]))
#Create Hover Text
state_pop$hover <-with(state_pop, paste(State, '<br>', "Population:", Pop))
#set up mapping options
map_options <-list(scope ='usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z= Pop, text = hover, locations = State, type = 'choropleth', locationmode = 'USA-states', color = Pop, colors = 'Blues', marker = list(line = borders))
#Create data frame
state_pop = data.frame(Stae = state.abb, Pop = as.vector(state.x77[,1]))
#Create Hover Text
state_pop$hover <-with(state_pop, paste(State, '<br>', "Population:", Pop))
#set up mapping options
state_pop = data.frame(Stae = state.abb, Pop = as.vector(state.x77[,1]))
#Create Hover Text
state_pop$hover <-with(state_pop, paste(State, '<br>', "Population:", Pop))
state_pop = data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
#Create Hover Text
state_pop$hover <-with(state_pop, paste(State, '<br>', "Population:", Pop))
#set up mapping options
map_options <-list(scope ='usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(state_pop, z= Pop, text = hover, locations = State, type = 'choropleth', locationmode = 'USA-states', color = Pop, colors = 'Blues', marker = list(line = borders)) %>% layout(titile = 'US Population in 1975', geo = map_options)
terrain1 = matrix(rnorm(100*100), nrow = 100, ncol = 100)
Pop
Pop = as.vector(state.x77[,1])
plot_ly(state_pop, z= Pop, text = hover, locations = State, type = 'choropleth', locationmode = 'USA-states', color = Pop, colors = 'Blues', marker = list(line = borders)) %>% layout(titile = 'US Population in 1975', geo = map_options)
plot_ly(state_pop, z= Pop, text = ~hover, locations = State, type = 'choropleth', locationmode = 'USA-states', color = Pop, colors = 'Blues', marker = list(line = borders)) %>% layout(titile = 'US Population in 1975', geo = map_options)
plot_ly(state_pop, z= ~Pop, text = ~hover, locations = ~State, type = 'choropleth', locationmode = 'USA-states', color = ~Pop, colors = 'Blues', marker = list(line = borders)) %>% layout(titile = 'US Population in 1975', geo = map_options)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shiny::runApp('Quiz')
library(shiny)
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
dim(my_data)
head(my_data)
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
my_map = leaflet() %>% addTiles()
my_map
my_map = leaflet()
mymap = addTiles(mymap)
my_map = leaflet()
mymap = addTiles(my_map)
my_map = addTiles(my_map)
my_map
my_map <- my_map %>% addMarkers(lat=42.280721,-71.335463)
my_map <- my_map %>% addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
my_map
my_map = leaflet()
my_map = addTiles(my_map)
my_map= addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital")
my_map
my_map = leaflet()
my_map = addTiles(my_map)
my_map= addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital")
my_map= addMarkers(my_map,lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital")
my_map
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
my_map
set.seed(123)
df = data.frame(lat = runif(20, min = 39.2, max=39.3),
lng = runif(20, min=-76.6, max = 76.5))
df %>% leaflet()%>% addTiles()%>% addMarkers()
df = data.frame(lat = runif(20, min = 39.2, max=39.3),
lng = runif(20, min=-76.6, max = -76.5))
df %>% leaflet()%>% addTiles()%>% addMarkers()
set.seed(123)
df = data.frame(lat = runif(500, min = 39.2, max=39.3),
lng = runif(500, min=-76.6, max = -76.5))
df %>% leaflet()%>% addTiles()%>% addMarkers(clusterOptions=markerClusterOptions())
?leaflet
df = data.frame(lat = runif(20, min = 39.2, max=39.3),
lng = runif(20, min=-76.6, max = -76.5))
df %>% leaflet() %>% addTiles()
leaflet(df) %>% addTiles()
addTiles(leaflet(df))
df(leaflet(addTiles()))
addTiles(leaflet(df()))
leaflet(addTiles(df))
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
library(leaflet)
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
my_map
mwhIcon = makeIcon(iconUrl = "https://www.mwmc.com/images/librariesprovider50/default-album/mw_clr_horiz.jpg?sfvrsn=0&MaxWidth=&MaxHeight=55&ScaleUp=false&Quality=High&Method=ResizeFitToAreaArguments&Signature=B70FFC239830B3198FF15C3BC32DEAAB")
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" )
mwhIcon = makeIcon(iconUrl = "https://www.mwmc.com/images/librariesprovider50/default-album/mw_clr_horiz.jpg?sfvrsn=0&MaxWidth=&MaxHeight=55&ScaleUp=false&Quality=High&Method=ResizeFitToAreaArguments&Signature=B70FFC239830B3198FF15C3BC32DEAAB")
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" , mwhIcon)
my_map
mwhIcon = makeIcon(iconUrl = "https://www.mwmc.com/images/librariesprovider50/default-album/mw_clr_horiz.jpg?sfvrsn=0&MaxWidth=&MaxHeight=55&ScaleUp=false&Quality=High&Method=ResizeFitToAreaArguments&Signature=B70FFC239830B3198FF15C3BC32DEAAB",
iconAnchorX = 31*215/230/2, iconAnchorY = 16)
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" , mwhIcon)
my_map
mwhIcon = makeIcon(iconUrl = "https://www.mwmc.com/images/librariesprovider50/default-album/mw_clr_horiz.jpg?sfvrsn=0&MaxWidth=&MaxHeight=55&ScaleUp=false&Quality=High&Method=ResizeFitToAreaArguments&Signature=B70FFC239830B3198FF15C3BC32DEAAB",
iconAnchorX = 31*215/230/2, iconAnchorY = 16,
iconWidth = 267, iconHeight = 55)
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital" , mwhIcon)
my_map
mwhIcon = makeIcon(iconUrl = "https://www.mwmc.com/images/librariesprovider50/default-album/mw_clr_horiz.jpg?sfvrsn=0&MaxWidth=&MaxHeight=55&ScaleUp=false&Quality=High&Method=ResizeFitToAreaArguments&Signature=B70FFC239830B3198FF15C3BC32DEAAB",
iconAnchorX = 31*215/230/2, iconAnchorY = 16,
iconWidth = 267, iconHeight = 55)
mwhUrl = "https://www.mwmc.com/home"
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup="Leonard Morse Hospital", icon = mwhIcon, popup = mwhUrl)
my_map
mwhUrl = "<a href='https://www.mwmc.com/home'> MetroWest Hospital</a>"
addMarkers(lat=42.280721,lng=-71.335463, icon = mwhIcon, popup = mwhUrl)
mwhUrl = c("<a href='https://www.mwmc.com/home'> MetroWest Hospital</a>")
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, icon = mwhIcon, popup = mwhUrl)
my_map
mwhIcon
mwhUrl = c("<a href='https://www.mwmc.com/home'> MetroWest Hospital</a>")
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup = mwhUrl)
mwhIcon
my_map
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup = mwhUrl,
addCircles(weight = 1, radius = 40) )
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup = mwhUrl) %>%
addCircles(weight = 1, radius = 40)
my_map = leaflet() %>%
addTiles() %>%
addMarkers(lat=42.280721,lng=-71.335463, popup = mwhUrl)
my_map
?rm
rm(list=ls())
# Load libraries necessary for processing... caret,randomforest, etc
library(caret)
library(randomForest)
library(base)
library(e1071)
rm(list=ls())
set.seed(123)
#Read the 2 data sets
`trainingset` <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"))
`testset`     <- read.csv(url("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"))
#remove columns that are null on the training and test set
trainingcolnames = names(trainingset[,colSums(is.na(testset))==0])
#remove timestamps, new_window and subject name
newtrainingcolnames=trainingcolnames[-c(2,3,4,5,6)]
reducedtrain =trainingset[,newtrainingcolnames]
#The classe variable does not exist in the testset... remove it.
testset.trainingcolnames = trainingcolnames[trainingcolnames != "classe"]
reducedtestset =testset[,testset.trainingcolnames]
#partition the training set into the training set and testing set with a 60/40 split between training and testing data sets.
inTrain = createDataPartition(reducedtrain$classe, p = 3/5)[[1]]
training =reducedtrain[inTrain,]
testing =  reducedtrain[-inTrain,]
View(trainingset)
View(testset)
trainingcolnames = names(trainingset[,colSums(is.na(testset))==0])
names(trainingset[,colSums(is.na(testset))==0])
trainingset[,colSums(is.na(testset))==0]
colSums(is.na(testset))==0
is.na(testset)
trainingset[,colSums(is.na(testset))==0]
colSums(is.na(testset))
names(trainingset[,colSums(is.na(testset))==0])
?createDataPartition
inTrain = createDataPartition(reducedtrain$classe, p = 3/5)[[1]]
library(caret)
install.packages("caret")
library(caret)
install.packages("ggplot2")
library(caret)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
install.packages("caret", dependencies = TRUE)
library(caret)
?createDataPartition
inTrain = createDataPartition(reducedtrain$classe, p = 3/5)[[1]]
training =reducedtrain[inTrain,]
testing =  reducedtrain[-inTrain,]
trc = trainControl(method= "repeatedcv", repeats = 3 , number = 5 )
start.time =proc.time()
mod.rf = train(classe~., data = training, method="rf", trControl = trc)
